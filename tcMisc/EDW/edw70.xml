<?xml version="1.0"?> 
<?xml-stylesheet type="text/css" href="teixlite.css"?>
<!--DOCTYPE TEI.2 PUBLIC "-//TEI//DTD TEI Lite XML ver. 1//EN"
"http://www.tei-c.org/Lite/DTD/teixlite.dtd"-->
<TEI.2 id="edw70">
<teiHeader>
<fileDesc>
<titleStmt><title>
EDW70: XMLification of the TEI Guidelines: preliminary work
</title>
<author>
Lou Burnard
</author>
</titleStmt>
<publicationStmt><p>
An unpublished document.
</p></publicationStmt>
<sourceDesc><p>
No source:  this electronic form is the original form.
</p></sourceDesc>
</fileDesc>
<revisionDesc>
<list>
<item>20 May 01: LB : drafted</item>
</list>
</revisionDesc>
</teiHeader>
<text>
<front>
<titlePage>
<docTitle>
<titlePart>
XMLification of the TEI Guidelines: preliminary report
</titlePart>
<titlePart>
TEI ED W70
</titlePart>
</docTitle>
<docAuthor>
Lou Burnard, Steven DeRose, Sebastian Rahtz
</docAuthor>
<docDate>
20 may 2001
</docDate>
</titlePage>
<divGen type='toc'/>
</front><body>
<div><head>Introduction</head>
<p>
This  document reports on work carried out to date in
producing an XML version of the TEI Guidelines. It should be read as a
      follow up to TEI document EDW69. In the
     process of carrying out this work, we have had to resolve some of
     the questions left open by that document, and also in a few
     cases reached different conclusions. For the most part, however,
     we have successfully used  TEI EDW69 as the blue print for achieving our
     desired goal: a version of TEI P3 which:
<list>
<item>is expressed  in XML and itself conforms to a TEI-conformant XML
       DTD;</item>
<item>generates a set of XML dtd fragments that can be combined
       together in the same way as the existing TEI (P3) SGML DTD
       fragments to form true TEI XML DTD fragments without loss of functionality;</item>
<item>can be processed and maintained using readily available XML
       tools instead of the special purpose ad hoc software originally
       used for TEI P3</item>
</list>
</p>
<p>A design goal of TEI EDW69 was to ensure that the DTD fragments
      generated by it would not break existing documents: in other
      words, that any document conforming to the original TEI P3 SGML
      DTD would also conform to the new XML version of it, though
      backwards compatility is not guaranteed. We believe our
      implementation is consistent with that goal, though we have not
      fully implemented some of the suggestions in TEI EDW69,
      particularly with respect to inclusion exceptions, as further
      discussed below.
     </p>
<p>We assume that the reader of this paper has also read EDW69, and is
      also familiar with the basic technical issues involved, most of
      which are summarized in its first section, and which we do not
      therefore repeat here. We
      should also express here our admiration for the detailed care
      put into that paper, without which the work described here would
      have been forbiddingly difficult if not impossible.</p>

</div>



<div type='section'><head>The state of P3</head>
<p>In its revisable  source form, TEI P3 consists of several hundred
     small files, of two types: <term>odd</term> files containing the
     prose text of individual sections of the Guidelines, and
     <term>tagdoc</term> files containing formal documentation for
     each entity, class, and element defined by the TEI DTDs. These
     files use a fairly transparent set of naming conventions, based
     on the internal SGML identifiers which are used to link the whole
     lot together. The individual sections of TEI P3 are stored in
     files with names <ident>p2xxy.odd</ident>, where the
     <mentioned>P2</mentioned> is a constant prefix, unchanged from
     the days of P2 for no very good reason, the  <mentioned>xx</mentioned> is the two
     character code used as main ID for the chapter, and the
     <mentioned>yy</mentioned> is a suffix used to provide a unique
     identifier. Sections and subsections of the document are given
     IDs which are constructed in a similar way. For example, chapter
     10, which describes the base tagset for drama, is held in a
     <gi>div1</gi> element whose identifier is <code>DR</code> and
     which is stored in a file
     called <ident>p2dr.odd</ident>; its subsections are embedded 
     by entity references within that file, for example,
     section 10.2, on front and back matter, appears as a reference to
     the <ident>&amp;p2drfab.odd;</ident> entity, which in turn resolves to the file
     <ident>p2drfab.odd</ident>, within which is stored a
     <gi>div2</gi> element whose identifier is <code>DRFAB</code>.
    </p>

<p>In the same way, the element <gi>abbr</gi> is documented in a
     <gi>tagDoc</gi> element, with the value <code>ABBR</code> for its
     <ident>id</ident> attribute. That tagdoc forms the sole content of
     a system file called <ident>abbr.tag</ident>. Similarly, the
     class <ident>a.linking</ident> is documented in a tagdoc file
     called <ident>linking.cla</ident> and referenced from elsewhere
     in the Guidelines by its <ident>id</ident> attribute, which is
     <code>LINKING</code>.  and references to that specification from
     the All these files conform to a special purpose TEI SGML DTD,
     which uses a small number of tags taken from TEI P1 and adds a
     number of other specialised elements for document processing,
     collectively known as the <term>ODD</term> (for <soCalled>One
     Document Does it all</soCalled>) system. This is not the place to
     explain the history, rationale, or development of that
     system.</p>

<p>We first made all the ODD files into well-formed XML, using a
     variety of techniques. [Steve : you have the notes ]. This
     process was substantially completed by September.</p> 

<p>The next step was to define an appropriate XML DTD for validation
     purposes. We decided to change as little as possible of the
     existing DTD; in particular, we changed only elements whose names
     were different in P3. We did not at this stage propose to convert
     wholesale from ODD1 to ODD2, since although we had no functional
     processors for either system, at least the mechanics of
     processing ODD1 had been clearly demonstrated in the Spitbol
     suite, and were well understood. ODD2 is a simpler tagset,
     requiring correspondingly more intelligence in the
     processor. Since our data was already marked up with very
     detailed (ODD1) information which could simplify the processing
     task, it seemed foolish to discard it.</p> 

<p>We therefore defined a DTD which added the ODD1 extensions for tag
     documentation crystals onto the TEI prose base, with a small
     number of other extensions. This DTD will need considerable
     further work, but it is functional. </p>
<p><!-- add details of this dtd? --></p>


<p>The whole of P3 was validated against this DTD during the first
     meeting of the TEI Board in Bergen, in May 2001.</p>
</div>

<div><head>The dtdGen stylesheet</head>

<p>Our next task was to write an XSL-T stylesheet which could process
   the text of P3 and generate either XML or SGML DTD fragments. This
   turned out to be relatively simple, once we had implemented the
   full range of XML modifications proposed in EDW69.</p>

<p>Accordingly, we pre-processed all of the tagdocs making a small number of minor syntactic
   changes:
<list>
<item>we parameterized all tag omissibility information, and added
       prose to <ident>p2st</ident> explaining how it could be toggled;</item>
<item>we normalized all references to parameter entities by ensuring
that they always end with a semicolon;</item>
<item>we considered, but decided against, parameterizing all
     references to GIs in content models in tagdocs; instead the <soCalled>%n.</soCalled>
    is added as a separate step during DTD generation.
</item>
</list>
</p>
<p>We next redefined content models for all elements using
   <kw>&amp;</kw> connectors, all elements with mixed content
   expressed in non-canonical form, and all elements using exclusion
   or inclusion exceptions. We also removed redundant parentheses from
   several content models. This was quite a long task, and needed
   much careful checking. </p>

<p>We followed the proposals of EDW69 with respect to addition of
   m.Incl to content models in all but the following respects:
<list>
<item>elements whose content is currently #PCDATA we left unchanged</item>
<item>we did not add m.Incl to any header element</item>
<item>we did not add m.Incl to any element in the SA, AI or FS tagsets
    (except for w m s )</item>
<item>one suggestion in edw69 (that relating to m.fragmentary) appears
     to be unimplementable; see further below.</item>
<item>the discussion in edw69 of the Dictionary chapter does not
       explain what is to be done about  elements <gi>entry</gi> and
       <gi>eg</gi>, both of which have inclusions; see further below.
      </item></list>
    </p>
<p>During this process, a number of other minor inconsistencies were
     fixed, as follows:
<list>
<item>There are a few elements in which attribute definitions are
   provided for the global attributes. Usually this is because the
   attribute is being used in a particular way for the element in
   question; in a few cases, it is because the default value for the
   attribute differs. In most cases, I simply moved the
   description into a <gi>remark</gi> element in the tagdoc; exceptions
   are noted below. Note that this means there will be unsatisfied
   references to attribute descriptions from <gi>taglist</gi>s in the
   Odds. These references are currently not done as ID/IDREFs though,
   so only an ODD processor will notice.</item>

<item>I have renamed the LANG attribute on <gi>hand</gi> as
 <ident>mainLang</ident>. The current situation made no sense.
</item>

<item>On <gi>anchor</gi>, <gi>hand</gi>, and <gi>when</gi>, the ID
     attribute is #REQUIRED. Since it is #IMPLIED everywhere else, I
     have changed it to #IMPLIED here as well. In the interests of
     consistency and simplicity of processing, we have to make the
     non-optionality of this attribute another of the things that a
     TEI (but not an XML) validator must check for. At least this
     change breaks no data.</item>
</list>
</p>
</div>
<div><head>Problematic Inclusions</head>

<p>EDW69 calls for the definition of a new class, called
   <ident>m.Incl</ident>, as a means of simplifying the process of adding inclusions to the content
models of the DTD. According to EDW69, this should consist of :
<list>
<item><ident>globincl</ident> (included by <gi>text</gi>)</item>
<item><ident>fragmentary</ident>, if the additional tag set for
text-critical apparatus is selected (included by <gi>lem</gi> and
<gi>rdg</gi>)</item>
<item>the <gi>anchor</gi> element.
      </item></list></p>
<p>However, the <gi>anchor</gi> element is already a member of the
   <ident>globincl</ident> class. Moreover, it is not at all clear how
   to modify <ident>teiclas2.ent</ident> in such a way as to achieve
   the desired effect: the definition for <ident>m.Incl</ident> must
   be given before it is first referenced, but it is referenced by
   several of the other class definitions which must in term precede
   the definition of <ident>m.fragmentary</ident>. In the absence of
   any obvious solution to this problem, I have simple redefined the
   content model of <gi>lem</gi> and <gi>rdg</gi> from
   <code>%specialPara; +(%m.fragmentary)</code> to <code>(#PCDATA | %m.phrase; | %m.inter; | %m.Incl; |
%m.fragmentary;)*</code>. This is unsatisfactory (it means that
   e.g. <gi>varStart</gi> elements can appear only between rather than
   within non-PCDATA child elements of a <gi>rdg</gi>), but its
   solution will have to wait. It should also be noted that the EDW69
   solution also has the undesirable side effect of propagating the
   m.fragmentary elements into the content models of all sorts of
   places outside <gi>rdg</gi> and <gi>lem</gi> where they are not
   required or meaningful.
</p>

<p>Curiously, EDW69 misses two rather horrible inclusions in the
   elements for the dictionary chapter. First is <gi>entry</gi>, which
   has a (surely redundant) inclusion of <gi>anchor</gi>: I have simply added m.Incl as a further
   alternative in its content model. Second, and more horrible, is <gi>eg</gi>
   which has a content model of (q | quote | cit)+
   +(%m.dictionaryParts; | %m.formPointers;). I havent the faintest
   what to do about that. So I'm just turning it into (q | quote | cit
   | %m.dictionaryParts; | %m.formPointers;)+ for now.
  </p>

<p>EDW69 proposes that we introduce an element <gi>dictAnomaly</gi> to
     act as a kind of cordon sanitaire around anomalous dictionary
     entries, i.e. parts of a dictionary entry which really should
     have a content model of ANY. I have introduced  this
     element, naming it <gi>dictScrap</gi>, but have not yet (22 May) modified
     the relevant text of the dictionary chapter  to discuss it, nor
     to get it defined in the DTD.</p>
</div>
<div><head>Open questions and checklists</head>
<p>This lists a number of questions left open in EDW69, and specifies
     the decision taken on them.
<list>
<item>Should entities for omissibility indications be introduced into
the TEI Odd files? (Yes, we have introduced them)</item>
<item>Should <gi>graph</gi> be defined as proposed here, or more
loosely? (We chose the looser option)</item>
<item>Should the failure to parameterize exclusion exceptions be
regarded as a corrigible error?  (No. We think enforcing the intended
       constraints should be the job of a TEI-aware validator)</item>
<item>How many of the current class of global inclusions should
actually be globally legal? (See list above; we have added global
       inclusions only where we think they are useful)</item>
<item>What should we do about <ident>specialPara</ident>? Ah, if only
       we knew.</item>
</list>
</p>
<p>Other corrigible errors identified in EDW69:
<list>
<item>absence of semicolons in parameter-entity references (fixed)</item>
<item>use of ampersand connectors in four content models (fixed)</item>
<item>use of <kw>#PCDATA</kw> not as prescribed in XML 1.0 (fixed)</item>
<item>excess parentheses in definition of <ident>phrase</ident> (fixed)</item>
</list>
</p>
</div>
<div><head>Unresolved  issues</head>
<p>The following lists changes which might be made in the DTD in the
   order that I discovered them. First, some things I noticed when
   dealing with global attributes
<list>
<item>The <gi>language</gi> element and its associated attribute
     LANG. Should we persist in insisting that it combines lang and
     wsd? I have tidied up the tagdoc a little
    </item>
<item>taglists reference their associated attdescs by name not by
     IDREF</item>
<item>the Terminology DTD fragments both define an element
     <gi>gram</gi> which also exists in the dictionary base. This
     is (so far) the only known instance of a tag which is present
in two base tagsets, a thing we have confidently asserted is
     impossible (since it makes it impossible to combine these two
     bases). For the moment, I have left this as is.</item>

<item>the specialPara problem is still with us</item>
</list>
    </p></div>
  </body>
</text>
</TEI.2>
